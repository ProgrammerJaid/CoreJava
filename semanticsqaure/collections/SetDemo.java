package com.semanticsqaure.collections;

import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.NavigableSet;
import java.util.Objects;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

public class SetDemo {

	private static void treeSetDemo() {
		Book book1 = new Book("Harry Potter", "J.K.Rowling", 1997);
		Book book2 = new Book("Harry Potter", "J.K.Rowling", 1997);
		Book book3 = new Book("Walden", "Henry David Thoreau", 1854);
		Book book4 = new Book("Effective Java", "Joshua Bloch", 2008);

		Set<Book> books = new TreeSet<>(new TitleComparator());		//We can sort by author or publication date
		books.add(book1);											//This is known as strategy pattern
		books.add(book2);
		books.add(book3);
		books.add(book4);

		for (Book book : books) {
			System.out.println(book);
		}
	}

	public static void linkedHashSetDemo() {
		Set<String> hashSet = new HashSet<>();
		hashSet.add("Raj");
		hashSet.add("John");
		hashSet.add("Anita");
		System.out.println("hashSet: " + hashSet);

		Set<String> linkedHashSet = new LinkedHashSet<>();
		linkedHashSet.add("Raj");
		linkedHashSet.add("John");
		linkedHashSet.add("Anita");
		System.out.println("linkedHashSet: " + linkedHashSet); // Order is preserved
	}

	private static void hashSetDemo() {
		Set<String> set1 = new HashSet<>(); // HashSet internally uses HashMap and
		set1.add("a"); // HashMap internally uses HashTable
		set1.add("b");
		set1.add("a");

		System.out.println("set1: " + set1);

		Book book1 = new Book("Walden", "Henry Thoreau", 1854);
		Book book2 = new Book("Walden", "Henry Thoreau", 1854); // Logically equal
		Set<Book> set2 = new HashSet<>();
		set2.add(book1);
		set2.add(book2);
		System.out.println("set2: " + set2);
	}

	public static void main(String[] args) {
		//hashSetDemo();
		//linkedHashSetDemo();
		//treeSetDemo();		//Gives classCastException if comparable or comparator is not used. 
		treeSetDemo2();
	}

	private static void treeSetDemo2() {
		NavigableSet<Integer> set = new TreeSet<>();
		set.add(5);	
		set.add(23);
		set.add(74);
		set.add(89);
		
		System.out.println("lower: "+set.lower(74));
		System.out.println("floor: "+set.floor(74));
		System.out.println("ceiling: "+set.ceiling(74));
		System.out.println("higher: "+set.higher(74));
		
		System.out.println("\nfirst: "+set.first());
		System.out.println("last: "+set.last());
		
		System.out.println("\nset: "+set);
		
		NavigableSet<Integer> descendingSet = set.descendingSet();
		System.out.println("\ndesendingSet: "+descendingSet);
	
		NavigableSet<Integer> headSet = set.headSet(74,true);
		System.out.println("headSet: "+headSet);
		
		headSet.add(6);
		System.out.println("headSet: "+headSet+" set: "+set);
		headSet.add(4);
		//headSet.add(75);	//Illegal argument exception number should be less than or equal to 74 
		
		SortedSet<Integer> subSet = set.subSet(5, 74);
		//subSet.add(2);	//Illegal argument exception number should be greater than or equal to 5
		
		set.add(25);
		System.out.println("\nsubSet: "+subSet);
	}
}

class Book /*implements Comparable*/ {
	private String title;
	private String author;
	private int year;

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public String getAuthor() {
		return author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	public int getYear() {
		return year;
	}

	public void setYear(int year) {
		this.year = year;
	}

	public Book(String title, String author, int year) {
		super();
		this.title = title;
		this.author = author;
		this.year = year;
	}

	@Override
	public String toString() {
		return "Book [title=" + title + ", author=" + author + ", year=" + year + "]";
	}

	@Override
	public int hashCode() { // Generated by source
		return Objects.hash(author, title, year);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Book other = (Book) obj;
		return Objects.equals(author, other.author) && Objects.equals(title, other.title) && year == other.year;
	}

	/*
	 * public int hashCode() { //These both methods are overridden to get one object
	 * if its equal return title.hashCode(); }
	 * 
	 * public boolean equals(Object o) { return (year == (((Book)o).getYear())) &&
	 * (author.equals((((Book)o).getAuthor()))); }
	 */
	
	//Natural ordering
	public int compareTo(Object book) {
		return getTitle().compareTo(((Book) book).getTitle()); // Utilizing String's compareTo
	} 	// Since Object type is of object class we need to downcast it to book
}

class TitleComparator implements Comparator {

	@Override
	public int compare(Object o1, Object o2) {
		return ((Book)o1).getTitle().compareTo(((Book)o2).getTitle());
	}
	
}

class YearComparator implements Comparator {

	@Override
	public int compare(Object o1, Object o2) {
		return ((Book)o1).getYear()<=((Book)o2).getYear()?-1:1;
	}
	
}
